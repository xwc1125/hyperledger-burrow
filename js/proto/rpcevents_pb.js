/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var exec_pb = require('./exec_pb.js');
goog.object.extend(proto, exec_pb);
goog.exportSymbol('proto.rpcevents.BlockRange', null, global);
goog.exportSymbol('proto.rpcevents.BlocksRequest', null, global);
goog.exportSymbol('proto.rpcevents.Bound', null, global);
goog.exportSymbol('proto.rpcevents.Bound.BoundType', null, global);
goog.exportSymbol('proto.rpcevents.EventsResponse', null, global);
goog.exportSymbol('proto.rpcevents.GetBlockRequest', null, global);
goog.exportSymbol('proto.rpcevents.GetTxsRequest', null, global);
goog.exportSymbol('proto.rpcevents.GetTxsResponse', null, global);
goog.exportSymbol('proto.rpcevents.TxRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.GetBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcevents.GetBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.GetBlockRequest.displayName = 'proto.rpcevents.GetBlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.GetBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.GetBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.GetBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.GetBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wait: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.GetBlockRequest}
 */
proto.rpcevents.GetBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.GetBlockRequest;
  return proto.rpcevents.GetBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.GetBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.GetBlockRequest}
 */
proto.rpcevents.GetBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.GetBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.GetBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.GetBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.GetBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWait();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.rpcevents.GetBlockRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcevents.GetBlockRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool Wait = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcevents.GetBlockRequest.prototype.getWait = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.rpcevents.GetBlockRequest.prototype.setWait = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.TxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcevents.TxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.TxRequest.displayName = 'proto.rpcevents.TxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.TxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.TxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.TxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.TxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: msg.getTxhash_asB64(),
    wait: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.TxRequest}
 */
proto.rpcevents.TxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.TxRequest;
  return proto.rpcevents.TxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.TxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.TxRequest}
 */
proto.rpcevents.TxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.TxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.TxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.TxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.TxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getWait();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes TxHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpcevents.TxRequest.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes TxHash = 1;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.rpcevents.TxRequest.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes TxHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.rpcevents.TxRequest.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpcevents.TxRequest.prototype.setTxhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool Wait = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpcevents.TxRequest.prototype.getWait = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.rpcevents.TxRequest.prototype.setWait = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.BlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcevents.BlocksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.BlocksRequest.displayName = 'proto.rpcevents.BlocksRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.BlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.BlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.BlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.BlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockrange: (f = msg.getBlockrange()) && proto.rpcevents.BlockRange.toObject(includeInstance, f),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.BlocksRequest}
 */
proto.rpcevents.BlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.BlocksRequest;
  return proto.rpcevents.BlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.BlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.BlocksRequest}
 */
proto.rpcevents.BlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpcevents.BlockRange;
      reader.readMessage(value,proto.rpcevents.BlockRange.deserializeBinaryFromReader);
      msg.setBlockrange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.BlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.BlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.BlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.BlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockrange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpcevents.BlockRange.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional BlockRange BlockRange = 1;
 * @return {?proto.rpcevents.BlockRange}
 */
proto.rpcevents.BlocksRequest.prototype.getBlockrange = function() {
  return /** @type{?proto.rpcevents.BlockRange} */ (
    jspb.Message.getWrapperField(this, proto.rpcevents.BlockRange, 1));
};


/** @param {?proto.rpcevents.BlockRange|undefined} value */
proto.rpcevents.BlocksRequest.prototype.setBlockrange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpcevents.BlocksRequest.prototype.clearBlockrange = function() {
  this.setBlockrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcevents.BlocksRequest.prototype.hasBlockrange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Query = 2;
 * @return {string}
 */
proto.rpcevents.BlocksRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpcevents.BlocksRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.EventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcevents.EventsResponse.repeatedFields_, null);
};
goog.inherits(proto.rpcevents.EventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.EventsResponse.displayName = 'proto.rpcevents.EventsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcevents.EventsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.EventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.EventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.EventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.EventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    exec_pb.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.EventsResponse}
 */
proto.rpcevents.EventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.EventsResponse;
  return proto.rpcevents.EventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.EventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.EventsResponse}
 */
proto.rpcevents.EventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new exec_pb.Event;
      reader.readMessage(value,exec_pb.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.EventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.EventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.EventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.EventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      exec_pb.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.rpcevents.EventsResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcevents.EventsResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated exec.Event Events = 2;
 * @return {!Array<!proto.exec.Event>}
 */
proto.rpcevents.EventsResponse.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.exec.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, exec_pb.Event, 2));
};


/** @param {!Array<!proto.exec.Event>} value */
proto.rpcevents.EventsResponse.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.exec.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exec.Event}
 */
proto.rpcevents.EventsResponse.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.exec.Event, opt_index);
};


proto.rpcevents.EventsResponse.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.GetTxsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcevents.GetTxsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.GetTxsRequest.displayName = 'proto.rpcevents.GetTxsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.GetTxsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.GetTxsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.GetTxsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.GetTxsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startheight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endheight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    query: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.GetTxsRequest}
 */
proto.rpcevents.GetTxsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.GetTxsRequest;
  return proto.rpcevents.GetTxsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.GetTxsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.GetTxsRequest}
 */
proto.rpcevents.GetTxsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartheight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndheight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.GetTxsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.GetTxsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.GetTxsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.GetTxsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartheight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndheight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 StartHeight = 1;
 * @return {number}
 */
proto.rpcevents.GetTxsRequest.prototype.getStartheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcevents.GetTxsRequest.prototype.setStartheight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 EndHeight = 2;
 * @return {number}
 */
proto.rpcevents.GetTxsRequest.prototype.getEndheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpcevents.GetTxsRequest.prototype.setEndheight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Query = 3;
 * @return {string}
 */
proto.rpcevents.GetTxsRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.rpcevents.GetTxsRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.GetTxsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpcevents.GetTxsResponse.repeatedFields_, null);
};
goog.inherits(proto.rpcevents.GetTxsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.GetTxsResponse.displayName = 'proto.rpcevents.GetTxsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpcevents.GetTxsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.GetTxsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.GetTxsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.GetTxsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.GetTxsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txexecutionsList: jspb.Message.toObjectList(msg.getTxexecutionsList(),
    exec_pb.TxExecution.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.GetTxsResponse}
 */
proto.rpcevents.GetTxsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.GetTxsResponse;
  return proto.rpcevents.GetTxsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.GetTxsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.GetTxsResponse}
 */
proto.rpcevents.GetTxsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new exec_pb.TxExecution;
      reader.readMessage(value,exec_pb.TxExecution.deserializeBinaryFromReader);
      msg.addTxexecutions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.GetTxsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.GetTxsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.GetTxsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.GetTxsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxexecutionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      exec_pb.TxExecution.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.rpcevents.GetTxsResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpcevents.GetTxsResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated exec.TxExecution TxExecutions = 2;
 * @return {!Array<!proto.exec.TxExecution>}
 */
proto.rpcevents.GetTxsResponse.prototype.getTxexecutionsList = function() {
  return /** @type{!Array<!proto.exec.TxExecution>} */ (
    jspb.Message.getRepeatedWrapperField(this, exec_pb.TxExecution, 2));
};


/** @param {!Array<!proto.exec.TxExecution>} value */
proto.rpcevents.GetTxsResponse.prototype.setTxexecutionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.exec.TxExecution=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exec.TxExecution}
 */
proto.rpcevents.GetTxsResponse.prototype.addTxexecutions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.exec.TxExecution, opt_index);
};


proto.rpcevents.GetTxsResponse.prototype.clearTxexecutionsList = function() {
  this.setTxexecutionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.Bound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcevents.Bound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.Bound.displayName = 'proto.rpcevents.Bound';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.Bound.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.Bound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.Bound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.Bound.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.Bound}
 */
proto.rpcevents.Bound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.Bound;
  return proto.rpcevents.Bound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.Bound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.Bound}
 */
proto.rpcevents.Bound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rpcevents.Bound.BoundType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.Bound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.Bound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.Bound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.Bound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rpcevents.Bound.BoundType = {
  ABSOLUTE: 0,
  RELATIVE: 1,
  FIRST: 2,
  LATEST: 3,
  STREAM: 4
};

/**
 * optional BoundType Type = 1;
 * @return {!proto.rpcevents.Bound.BoundType}
 */
proto.rpcevents.Bound.prototype.getType = function() {
  return /** @type {!proto.rpcevents.Bound.BoundType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.rpcevents.Bound.BoundType} value */
proto.rpcevents.Bound.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 Index = 2;
 * @return {number}
 */
proto.rpcevents.Bound.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpcevents.Bound.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpcevents.BlockRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpcevents.BlockRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpcevents.BlockRange.displayName = 'proto.rpcevents.BlockRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpcevents.BlockRange.prototype.toObject = function(opt_includeInstance) {
  return proto.rpcevents.BlockRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpcevents.BlockRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.BlockRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.rpcevents.Bound.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.rpcevents.Bound.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpcevents.BlockRange}
 */
proto.rpcevents.BlockRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpcevents.BlockRange;
  return proto.rpcevents.BlockRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpcevents.BlockRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpcevents.BlockRange}
 */
proto.rpcevents.BlockRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpcevents.Bound;
      reader.readMessage(value,proto.rpcevents.Bound.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.rpcevents.Bound;
      reader.readMessage(value,proto.rpcevents.Bound.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpcevents.BlockRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpcevents.BlockRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpcevents.BlockRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpcevents.BlockRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpcevents.Bound.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpcevents.Bound.serializeBinaryToWriter
    );
  }
};


/**
 * optional Bound Start = 1;
 * @return {?proto.rpcevents.Bound}
 */
proto.rpcevents.BlockRange.prototype.getStart = function() {
  return /** @type{?proto.rpcevents.Bound} */ (
    jspb.Message.getWrapperField(this, proto.rpcevents.Bound, 1));
};


/** @param {?proto.rpcevents.Bound|undefined} value */
proto.rpcevents.BlockRange.prototype.setStart = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpcevents.BlockRange.prototype.clearStart = function() {
  this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcevents.BlockRange.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Bound End = 2;
 * @return {?proto.rpcevents.Bound}
 */
proto.rpcevents.BlockRange.prototype.getEnd = function() {
  return /** @type{?proto.rpcevents.Bound} */ (
    jspb.Message.getWrapperField(this, proto.rpcevents.Bound, 2));
};


/** @param {?proto.rpcevents.Bound|undefined} value */
proto.rpcevents.BlockRange.prototype.setEnd = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpcevents.BlockRange.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpcevents.BlockRange.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.rpcevents);
