/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var github_com_tendermint_tendermint_abci_types_types_pb = require('./github.com/tendermint/tendermint/abci/types/types_pb.js');
goog.object.extend(proto, github_com_tendermint_tendermint_abci_types_types_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var errors_pb = require('./errors_pb.js');
goog.object.extend(proto, errors_pb);
var names_pb = require('./names_pb.js');
goog.object.extend(proto, names_pb);
var txs_pb = require('./txs_pb.js');
goog.object.extend(proto, txs_pb);
var permission_pb = require('./permission_pb.js');
goog.object.extend(proto, permission_pb);
var spec_pb = require('./spec_pb.js');
goog.object.extend(proto, spec_pb);
goog.exportSymbol('proto.exec.BeginBlock', null, global);
goog.exportSymbol('proto.exec.BeginTx', null, global);
goog.exportSymbol('proto.exec.BlockExecution', null, global);
goog.exportSymbol('proto.exec.CallData', null, global);
goog.exportSymbol('proto.exec.CallEvent', null, global);
goog.exportSymbol('proto.exec.EndBlock', null, global);
goog.exportSymbol('proto.exec.EndTx', null, global);
goog.exportSymbol('proto.exec.Event', null, global);
goog.exportSymbol('proto.exec.GovernAccountEvent', null, global);
goog.exportSymbol('proto.exec.Header', null, global);
goog.exportSymbol('proto.exec.InputEvent', null, global);
goog.exportSymbol('proto.exec.LogEvent', null, global);
goog.exportSymbol('proto.exec.Origin', null, global);
goog.exportSymbol('proto.exec.OutputEvent', null, global);
goog.exportSymbol('proto.exec.Result', null, global);
goog.exportSymbol('proto.exec.StreamEvent', null, global);
goog.exportSymbol('proto.exec.StreamEvents', null, global);
goog.exportSymbol('proto.exec.TxExecution', null, global);
goog.exportSymbol('proto.exec.TxExecutionKey', null, global);
goog.exportSymbol('proto.exec.TxHeader', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.StreamEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exec.StreamEvents.repeatedFields_, null);
};
goog.inherits(proto.exec.StreamEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.StreamEvents.displayName = 'proto.exec.StreamEvents';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exec.StreamEvents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.StreamEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.StreamEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.StreamEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.StreamEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    streameventsList: jspb.Message.toObjectList(msg.getStreameventsList(),
    proto.exec.StreamEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.StreamEvents}
 */
proto.exec.StreamEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.StreamEvents;
  return proto.exec.StreamEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.StreamEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.StreamEvents}
 */
proto.exec.StreamEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exec.StreamEvent;
      reader.readMessage(value,proto.exec.StreamEvent.deserializeBinaryFromReader);
      msg.addStreamevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.StreamEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.StreamEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.StreamEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.StreamEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreameventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.exec.StreamEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StreamEvent StreamEvents = 1;
 * @return {!Array<!proto.exec.StreamEvent>}
 */
proto.exec.StreamEvents.prototype.getStreameventsList = function() {
  return /** @type{!Array<!proto.exec.StreamEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exec.StreamEvent, 1));
};


/** @param {!Array<!proto.exec.StreamEvent>} value */
proto.exec.StreamEvents.prototype.setStreameventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.exec.StreamEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exec.StreamEvent}
 */
proto.exec.StreamEvents.prototype.addStreamevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.exec.StreamEvent, opt_index);
};


proto.exec.StreamEvents.prototype.clearStreameventsList = function() {
  this.setStreameventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.StreamEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.StreamEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.StreamEvent.displayName = 'proto.exec.StreamEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.StreamEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.StreamEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.StreamEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.StreamEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    beginblock: (f = msg.getBeginblock()) && proto.exec.BeginBlock.toObject(includeInstance, f),
    begintx: (f = msg.getBegintx()) && proto.exec.BeginTx.toObject(includeInstance, f),
    envelope: (f = msg.getEnvelope()) && txs_pb.Envelope.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.exec.Event.toObject(includeInstance, f),
    endtx: (f = msg.getEndtx()) && proto.exec.EndTx.toObject(includeInstance, f),
    endblock: (f = msg.getEndblock()) && proto.exec.EndBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.StreamEvent}
 */
proto.exec.StreamEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.StreamEvent;
  return proto.exec.StreamEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.StreamEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.StreamEvent}
 */
proto.exec.StreamEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exec.BeginBlock;
      reader.readMessage(value,proto.exec.BeginBlock.deserializeBinaryFromReader);
      msg.setBeginblock(value);
      break;
    case 2:
      var value = new proto.exec.BeginTx;
      reader.readMessage(value,proto.exec.BeginTx.deserializeBinaryFromReader);
      msg.setBegintx(value);
      break;
    case 3:
      var value = new txs_pb.Envelope;
      reader.readMessage(value,txs_pb.Envelope.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    case 4:
      var value = new proto.exec.Event;
      reader.readMessage(value,proto.exec.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 5:
      var value = new proto.exec.EndTx;
      reader.readMessage(value,proto.exec.EndTx.deserializeBinaryFromReader);
      msg.setEndtx(value);
      break;
    case 6:
      var value = new proto.exec.EndBlock;
      reader.readMessage(value,proto.exec.EndBlock.deserializeBinaryFromReader);
      msg.setEndblock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.StreamEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.StreamEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.StreamEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.StreamEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeginblock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.exec.BeginBlock.serializeBinaryToWriter
    );
  }
  f = message.getBegintx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exec.BeginTx.serializeBinaryToWriter
    );
  }
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      txs_pb.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.exec.Event.serializeBinaryToWriter
    );
  }
  f = message.getEndtx();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.exec.EndTx.serializeBinaryToWriter
    );
  }
  f = message.getEndblock();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.exec.EndBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional BeginBlock BeginBlock = 1;
 * @return {?proto.exec.BeginBlock}
 */
proto.exec.StreamEvent.prototype.getBeginblock = function() {
  return /** @type{?proto.exec.BeginBlock} */ (
    jspb.Message.getWrapperField(this, proto.exec.BeginBlock, 1));
};


/** @param {?proto.exec.BeginBlock|undefined} value */
proto.exec.StreamEvent.prototype.setBeginblock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.exec.StreamEvent.prototype.clearBeginblock = function() {
  this.setBeginblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.StreamEvent.prototype.hasBeginblock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BeginTx BeginTx = 2;
 * @return {?proto.exec.BeginTx}
 */
proto.exec.StreamEvent.prototype.getBegintx = function() {
  return /** @type{?proto.exec.BeginTx} */ (
    jspb.Message.getWrapperField(this, proto.exec.BeginTx, 2));
};


/** @param {?proto.exec.BeginTx|undefined} value */
proto.exec.StreamEvent.prototype.setBegintx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.exec.StreamEvent.prototype.clearBegintx = function() {
  this.setBegintx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.StreamEvent.prototype.hasBegintx = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional txs.Envelope Envelope = 3;
 * @return {?proto.txs.Envelope}
 */
proto.exec.StreamEvent.prototype.getEnvelope = function() {
  return /** @type{?proto.txs.Envelope} */ (
    jspb.Message.getWrapperField(this, txs_pb.Envelope, 3));
};


/** @param {?proto.txs.Envelope|undefined} value */
proto.exec.StreamEvent.prototype.setEnvelope = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.exec.StreamEvent.prototype.clearEnvelope = function() {
  this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.StreamEvent.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Event Event = 4;
 * @return {?proto.exec.Event}
 */
proto.exec.StreamEvent.prototype.getEvent = function() {
  return /** @type{?proto.exec.Event} */ (
    jspb.Message.getWrapperField(this, proto.exec.Event, 4));
};


/** @param {?proto.exec.Event|undefined} value */
proto.exec.StreamEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.exec.StreamEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.StreamEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EndTx EndTx = 5;
 * @return {?proto.exec.EndTx}
 */
proto.exec.StreamEvent.prototype.getEndtx = function() {
  return /** @type{?proto.exec.EndTx} */ (
    jspb.Message.getWrapperField(this, proto.exec.EndTx, 5));
};


/** @param {?proto.exec.EndTx|undefined} value */
proto.exec.StreamEvent.prototype.setEndtx = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.exec.StreamEvent.prototype.clearEndtx = function() {
  this.setEndtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.StreamEvent.prototype.hasEndtx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EndBlock EndBlock = 6;
 * @return {?proto.exec.EndBlock}
 */
proto.exec.StreamEvent.prototype.getEndblock = function() {
  return /** @type{?proto.exec.EndBlock} */ (
    jspb.Message.getWrapperField(this, proto.exec.EndBlock, 6));
};


/** @param {?proto.exec.EndBlock|undefined} value */
proto.exec.StreamEvent.prototype.setEndblock = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.exec.StreamEvent.prototype.clearEndblock = function() {
  this.setEndblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.StreamEvent.prototype.hasEndblock = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.BeginBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.BeginBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.BeginBlock.displayName = 'proto.exec.BeginBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.BeginBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.BeginBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.BeginBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.BeginBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numtxs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    predecessorheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    header: (f = msg.getHeader()) && github_com_tendermint_tendermint_abci_types_types_pb.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.BeginBlock}
 */
proto.exec.BeginBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.BeginBlock;
  return proto.exec.BeginBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.BeginBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.BeginBlock}
 */
proto.exec.BeginBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumtxs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPredecessorheight(value);
      break;
    case 2:
      var value = new github_com_tendermint_tendermint_abci_types_types_pb.Header;
      reader.readMessage(value,github_com_tendermint_tendermint_abci_types_types_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.BeginBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.BeginBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.BeginBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.BeginBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNumtxs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPredecessorheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_tendermint_tendermint_abci_types_types_pb.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.exec.BeginBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.exec.BeginBlock.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 NumTxs = 3;
 * @return {number}
 */
proto.exec.BeginBlock.prototype.getNumtxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.exec.BeginBlock.prototype.setNumtxs = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 PredecessorHeight = 4;
 * @return {number}
 */
proto.exec.BeginBlock.prototype.getPredecessorheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.exec.BeginBlock.prototype.setPredecessorheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional types.Header Header = 2;
 * @return {?proto.types.Header}
 */
proto.exec.BeginBlock.prototype.getHeader = function() {
  return /** @type{?proto.types.Header} */ (
    jspb.Message.getWrapperField(this, github_com_tendermint_tendermint_abci_types_types_pb.Header, 2));
};


/** @param {?proto.types.Header|undefined} value */
proto.exec.BeginBlock.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.exec.BeginBlock.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.BeginBlock.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.EndBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.EndBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.EndBlock.displayName = 'proto.exec.EndBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.EndBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.EndBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.EndBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.EndBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.EndBlock}
 */
proto.exec.EndBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.EndBlock;
  return proto.exec.EndBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.EndBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.EndBlock}
 */
proto.exec.EndBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.EndBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.EndBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.EndBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.EndBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.exec.EndBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.exec.EndBlock.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.BeginTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.BeginTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.BeginTx.displayName = 'proto.exec.BeginTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.BeginTx.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.BeginTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.BeginTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.BeginTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    txheader: (f = msg.getTxheader()) && proto.exec.TxHeader.toObject(includeInstance, f),
    numevents: jspb.Message.getFieldWithDefault(msg, 5, 0),
    result: (f = msg.getResult()) && proto.exec.Result.toObject(includeInstance, f),
    exception: (f = msg.getException()) && errors_pb.Exception.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.BeginTx}
 */
proto.exec.BeginTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.BeginTx;
  return proto.exec.BeginTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.BeginTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.BeginTx}
 */
proto.exec.BeginTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exec.TxHeader;
      reader.readMessage(value,proto.exec.TxHeader.deserializeBinaryFromReader);
      msg.setTxheader(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumevents(value);
      break;
    case 2:
      var value = new proto.exec.Result;
      reader.readMessage(value,proto.exec.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 4:
      var value = new errors_pb.Exception;
      reader.readMessage(value,errors_pb.Exception.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.BeginTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.BeginTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.BeginTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.BeginTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxheader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.exec.TxHeader.serializeBinaryToWriter
    );
  }
  f = message.getNumevents();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exec.Result.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      errors_pb.Exception.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxHeader TxHeader = 1;
 * @return {?proto.exec.TxHeader}
 */
proto.exec.BeginTx.prototype.getTxheader = function() {
  return /** @type{?proto.exec.TxHeader} */ (
    jspb.Message.getWrapperField(this, proto.exec.TxHeader, 1));
};


/** @param {?proto.exec.TxHeader|undefined} value */
proto.exec.BeginTx.prototype.setTxheader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.exec.BeginTx.prototype.clearTxheader = function() {
  this.setTxheader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.BeginTx.prototype.hasTxheader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 NumEvents = 5;
 * @return {number}
 */
proto.exec.BeginTx.prototype.getNumevents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.exec.BeginTx.prototype.setNumevents = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Result Result = 2;
 * @return {?proto.exec.Result}
 */
proto.exec.BeginTx.prototype.getResult = function() {
  return /** @type{?proto.exec.Result} */ (
    jspb.Message.getWrapperField(this, proto.exec.Result, 2));
};


/** @param {?proto.exec.Result|undefined} value */
proto.exec.BeginTx.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.exec.BeginTx.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.BeginTx.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional errors.Exception Exception = 4;
 * @return {?proto.errors.Exception}
 */
proto.exec.BeginTx.prototype.getException = function() {
  return /** @type{?proto.errors.Exception} */ (
    jspb.Message.getWrapperField(this, errors_pb.Exception, 4));
};


/** @param {?proto.errors.Exception|undefined} value */
proto.exec.BeginTx.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.exec.BeginTx.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.BeginTx.prototype.hasException = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.EndTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.EndTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.EndTx.displayName = 'proto.exec.EndTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.EndTx.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.EndTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.EndTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.EndTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: msg.getTxhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.EndTx}
 */
proto.exec.EndTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.EndTx;
  return proto.exec.EndTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.EndTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.EndTx}
 */
proto.exec.EndTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.EndTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.EndTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.EndTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.EndTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes TxHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.exec.EndTx.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes TxHash = 3;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.exec.EndTx.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes TxHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.exec.EndTx.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.EndTx.prototype.setTxhash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.TxHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.TxHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.TxHeader.displayName = 'proto.exec.TxHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.TxHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.TxHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.TxHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.TxHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    txtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txhash: msg.getTxhash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0),
    origin: (f = msg.getOrigin()) && proto.exec.Origin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.TxHeader}
 */
proto.exec.TxHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.TxHeader;
  return proto.exec.TxHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.TxHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.TxHeader}
 */
proto.exec.TxHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 5:
      var value = new proto.exec.Origin;
      reader.readMessage(value,proto.exec.Origin.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.TxHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.TxHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.TxHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.TxHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxtype();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.exec.Origin.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 TxType = 1;
 * @return {number}
 */
proto.exec.TxHeader.prototype.getTxtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.exec.TxHeader.prototype.setTxtype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes TxHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.exec.TxHeader.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes TxHash = 2;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.exec.TxHeader.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes TxHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.exec.TxHeader.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.TxHeader.prototype.setTxhash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 Height = 3;
 * @return {number}
 */
proto.exec.TxHeader.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.exec.TxHeader.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Index = 4;
 * @return {number}
 */
proto.exec.TxHeader.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.exec.TxHeader.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Origin Origin = 5;
 * @return {?proto.exec.Origin}
 */
proto.exec.TxHeader.prototype.getOrigin = function() {
  return /** @type{?proto.exec.Origin} */ (
    jspb.Message.getWrapperField(this, proto.exec.Origin, 5));
};


/** @param {?proto.exec.Origin|undefined} value */
proto.exec.TxHeader.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.exec.TxHeader.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.TxHeader.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.BlockExecution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exec.BlockExecution.repeatedFields_, null);
};
goog.inherits(proto.exec.BlockExecution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.BlockExecution.displayName = 'proto.exec.BlockExecution';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exec.BlockExecution.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.BlockExecution.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.BlockExecution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.BlockExecution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.BlockExecution.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    predecessorheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    header: (f = msg.getHeader()) && github_com_tendermint_tendermint_abci_types_types_pb.Header.toObject(includeInstance, f),
    txexecutionsList: jspb.Message.toObjectList(msg.getTxexecutionsList(),
    proto.exec.TxExecution.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.BlockExecution}
 */
proto.exec.BlockExecution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.BlockExecution;
  return proto.exec.BlockExecution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.BlockExecution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.BlockExecution}
 */
proto.exec.BlockExecution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPredecessorheight(value);
      break;
    case 2:
      var value = new github_com_tendermint_tendermint_abci_types_types_pb.Header;
      reader.readMessage(value,github_com_tendermint_tendermint_abci_types_types_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.exec.TxExecution;
      reader.readMessage(value,proto.exec.TxExecution.deserializeBinaryFromReader);
      msg.addTxexecutions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.BlockExecution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.BlockExecution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.BlockExecution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.BlockExecution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPredecessorheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_tendermint_tendermint_abci_types_types_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getTxexecutionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.exec.TxExecution.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.exec.BlockExecution.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.exec.BlockExecution.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 PredecessorHeight = 4;
 * @return {number}
 */
proto.exec.BlockExecution.prototype.getPredecessorheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.exec.BlockExecution.prototype.setPredecessorheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional types.Header Header = 2;
 * @return {?proto.types.Header}
 */
proto.exec.BlockExecution.prototype.getHeader = function() {
  return /** @type{?proto.types.Header} */ (
    jspb.Message.getWrapperField(this, github_com_tendermint_tendermint_abci_types_types_pb.Header, 2));
};


/** @param {?proto.types.Header|undefined} value */
proto.exec.BlockExecution.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.exec.BlockExecution.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.BlockExecution.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TxExecution TxExecutions = 3;
 * @return {!Array<!proto.exec.TxExecution>}
 */
proto.exec.BlockExecution.prototype.getTxexecutionsList = function() {
  return /** @type{!Array<!proto.exec.TxExecution>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exec.TxExecution, 3));
};


/** @param {!Array<!proto.exec.TxExecution>} value */
proto.exec.BlockExecution.prototype.setTxexecutionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.exec.TxExecution=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exec.TxExecution}
 */
proto.exec.BlockExecution.prototype.addTxexecutions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.exec.TxExecution, opt_index);
};


proto.exec.BlockExecution.prototype.clearTxexecutionsList = function() {
  this.setTxexecutionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.TxExecutionKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.TxExecutionKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.TxExecutionKey.displayName = 'proto.exec.TxExecutionKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.TxExecutionKey.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.TxExecutionKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.TxExecutionKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.TxExecutionKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.TxExecutionKey}
 */
proto.exec.TxExecutionKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.TxExecutionKey;
  return proto.exec.TxExecutionKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.TxExecutionKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.TxExecutionKey}
 */
proto.exec.TxExecutionKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.TxExecutionKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.TxExecutionKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.TxExecutionKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.TxExecutionKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.exec.TxExecutionKey.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.exec.TxExecutionKey.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Offset = 2;
 * @return {number}
 */
proto.exec.TxExecutionKey.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.exec.TxExecutionKey.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.TxExecution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exec.TxExecution.repeatedFields_, null);
};
goog.inherits(proto.exec.TxExecution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.TxExecution.displayName = 'proto.exec.TxExecution';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exec.TxExecution.repeatedFields_ = [7,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.TxExecution.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.TxExecution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.TxExecution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.TxExecution.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.exec.TxHeader.toObject(includeInstance, f),
    envelope: (f = msg.getEnvelope()) && txs_pb.Envelope.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.exec.Event.toObject, includeInstance),
    result: (f = msg.getResult()) && proto.exec.Result.toObject(includeInstance, f),
    receipt: (f = msg.getReceipt()) && txs_pb.Receipt.toObject(includeInstance, f),
    exception: (f = msg.getException()) && errors_pb.Exception.toObject(includeInstance, f),
    txexecutionsList: jspb.Message.toObjectList(msg.getTxexecutionsList(),
    proto.exec.TxExecution.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.TxExecution}
 */
proto.exec.TxExecution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.TxExecution;
  return proto.exec.TxExecution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.TxExecution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.TxExecution}
 */
proto.exec.TxExecution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exec.TxHeader;
      reader.readMessage(value,proto.exec.TxHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 6:
      var value = new txs_pb.Envelope;
      reader.readMessage(value,txs_pb.Envelope.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    case 7:
      var value = new proto.exec.Event;
      reader.readMessage(value,proto.exec.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 8:
      var value = new proto.exec.Result;
      reader.readMessage(value,proto.exec.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 9:
      var value = new txs_pb.Receipt;
      reader.readMessage(value,txs_pb.Receipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 10:
      var value = new errors_pb.Exception;
      reader.readMessage(value,errors_pb.Exception.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    case 11:
      var value = new proto.exec.TxExecution;
      reader.readMessage(value,proto.exec.TxExecution.deserializeBinaryFromReader);
      msg.addTxexecutions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.TxExecution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.TxExecution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.TxExecution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.TxExecution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.exec.TxHeader.serializeBinaryToWriter
    );
  }
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      txs_pb.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.exec.Event.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.exec.Result.serializeBinaryToWriter
    );
  }
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      txs_pb.Receipt.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      errors_pb.Exception.serializeBinaryToWriter
    );
  }
  f = message.getTxexecutionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.exec.TxExecution.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxHeader Header = 1;
 * @return {?proto.exec.TxHeader}
 */
proto.exec.TxExecution.prototype.getHeader = function() {
  return /** @type{?proto.exec.TxHeader} */ (
    jspb.Message.getWrapperField(this, proto.exec.TxHeader, 1));
};


/** @param {?proto.exec.TxHeader|undefined} value */
proto.exec.TxExecution.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.exec.TxExecution.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.TxExecution.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional txs.Envelope Envelope = 6;
 * @return {?proto.txs.Envelope}
 */
proto.exec.TxExecution.prototype.getEnvelope = function() {
  return /** @type{?proto.txs.Envelope} */ (
    jspb.Message.getWrapperField(this, txs_pb.Envelope, 6));
};


/** @param {?proto.txs.Envelope|undefined} value */
proto.exec.TxExecution.prototype.setEnvelope = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.exec.TxExecution.prototype.clearEnvelope = function() {
  this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.TxExecution.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Event Events = 7;
 * @return {!Array<!proto.exec.Event>}
 */
proto.exec.TxExecution.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.exec.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exec.Event, 7));
};


/** @param {!Array<!proto.exec.Event>} value */
proto.exec.TxExecution.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.exec.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exec.Event}
 */
proto.exec.TxExecution.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.exec.Event, opt_index);
};


proto.exec.TxExecution.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * optional Result Result = 8;
 * @return {?proto.exec.Result}
 */
proto.exec.TxExecution.prototype.getResult = function() {
  return /** @type{?proto.exec.Result} */ (
    jspb.Message.getWrapperField(this, proto.exec.Result, 8));
};


/** @param {?proto.exec.Result|undefined} value */
proto.exec.TxExecution.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.exec.TxExecution.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.TxExecution.prototype.hasResult = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional txs.Receipt Receipt = 9;
 * @return {?proto.txs.Receipt}
 */
proto.exec.TxExecution.prototype.getReceipt = function() {
  return /** @type{?proto.txs.Receipt} */ (
    jspb.Message.getWrapperField(this, txs_pb.Receipt, 9));
};


/** @param {?proto.txs.Receipt|undefined} value */
proto.exec.TxExecution.prototype.setReceipt = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.exec.TxExecution.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.TxExecution.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional errors.Exception Exception = 10;
 * @return {?proto.errors.Exception}
 */
proto.exec.TxExecution.prototype.getException = function() {
  return /** @type{?proto.errors.Exception} */ (
    jspb.Message.getWrapperField(this, errors_pb.Exception, 10));
};


/** @param {?proto.errors.Exception|undefined} value */
proto.exec.TxExecution.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.exec.TxExecution.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.TxExecution.prototype.hasException = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated TxExecution TxExecutions = 11;
 * @return {!Array<!proto.exec.TxExecution>}
 */
proto.exec.TxExecution.prototype.getTxexecutionsList = function() {
  return /** @type{!Array<!proto.exec.TxExecution>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exec.TxExecution, 11));
};


/** @param {!Array<!proto.exec.TxExecution>} value */
proto.exec.TxExecution.prototype.setTxexecutionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.exec.TxExecution=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exec.TxExecution}
 */
proto.exec.TxExecution.prototype.addTxexecutions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.exec.TxExecution, opt_index);
};


proto.exec.TxExecution.prototype.clearTxexecutionsList = function() {
  this.setTxexecutionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.Origin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.Origin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.Origin.displayName = 'proto.exec.Origin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.Origin.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.Origin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.Origin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Origin.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.Origin}
 */
proto.exec.Origin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.Origin;
  return proto.exec.Origin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.Origin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.Origin}
 */
proto.exec.Origin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.Origin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.Origin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.Origin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Origin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ChainID = 1;
 * @return {string}
 */
proto.exec.Origin.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.exec.Origin.prototype.setChainid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 Height = 2;
 * @return {number}
 */
proto.exec.Origin.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.exec.Origin.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 Index = 3;
 * @return {number}
 */
proto.exec.Origin.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.exec.Origin.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp Time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.exec.Origin.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.exec.Origin.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.exec.Origin.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Origin.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.Header.displayName = 'proto.exec.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    txtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txhash: msg.getTxhash_asB64(),
    eventtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    eventid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    index: jspb.Message.getFieldWithDefault(msg, 6, 0),
    exception: (f = msg.getException()) && errors_pb.Exception.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.Header}
 */
proto.exec.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.Header;
  return proto.exec.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.Header}
 */
proto.exec.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEventtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 7:
      var value = new errors_pb.Exception;
      reader.readMessage(value,errors_pb.Exception.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxtype();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEventtype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEventid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      errors_pb.Exception.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 TxType = 1;
 * @return {number}
 */
proto.exec.Header.prototype.getTxtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.exec.Header.prototype.setTxtype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes TxHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.exec.Header.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes TxHash = 2;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.exec.Header.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes TxHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.exec.Header.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.Header.prototype.setTxhash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 EventType = 3;
 * @return {number}
 */
proto.exec.Header.prototype.getEventtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.exec.Header.prototype.setEventtype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string EventID = 4;
 * @return {string}
 */
proto.exec.Header.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.exec.Header.prototype.setEventid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 Height = 5;
 * @return {number}
 */
proto.exec.Header.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.exec.Header.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 Index = 6;
 * @return {number}
 */
proto.exec.Header.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.exec.Header.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional errors.Exception Exception = 7;
 * @return {?proto.errors.Exception}
 */
proto.exec.Header.prototype.getException = function() {
  return /** @type{?proto.errors.Exception} */ (
    jspb.Message.getWrapperField(this, errors_pb.Exception, 7));
};


/** @param {?proto.errors.Exception|undefined} value */
proto.exec.Header.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.exec.Header.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Header.prototype.hasException = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.Event.displayName = 'proto.exec.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.exec.Header.toObject(includeInstance, f),
    input: (f = msg.getInput()) && proto.exec.InputEvent.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.exec.OutputEvent.toObject(includeInstance, f),
    call: (f = msg.getCall()) && proto.exec.CallEvent.toObject(includeInstance, f),
    log: (f = msg.getLog()) && proto.exec.LogEvent.toObject(includeInstance, f),
    governaccount: (f = msg.getGovernaccount()) && proto.exec.GovernAccountEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.Event}
 */
proto.exec.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.Event;
  return proto.exec.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.Event}
 */
proto.exec.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exec.Header;
      reader.readMessage(value,proto.exec.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.exec.InputEvent;
      reader.readMessage(value,proto.exec.InputEvent.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 3:
      var value = new proto.exec.OutputEvent;
      reader.readMessage(value,proto.exec.OutputEvent.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 4:
      var value = new proto.exec.CallEvent;
      reader.readMessage(value,proto.exec.CallEvent.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    case 5:
      var value = new proto.exec.LogEvent;
      reader.readMessage(value,proto.exec.LogEvent.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    case 6:
      var value = new proto.exec.GovernAccountEvent;
      reader.readMessage(value,proto.exec.GovernAccountEvent.deserializeBinaryFromReader);
      msg.setGovernaccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.exec.Header.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exec.InputEvent.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.exec.OutputEvent.serializeBinaryToWriter
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.exec.CallEvent.serializeBinaryToWriter
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.exec.LogEvent.serializeBinaryToWriter
    );
  }
  f = message.getGovernaccount();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.exec.GovernAccountEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header Header = 1;
 * @return {?proto.exec.Header}
 */
proto.exec.Event.prototype.getHeader = function() {
  return /** @type{?proto.exec.Header} */ (
    jspb.Message.getWrapperField(this, proto.exec.Header, 1));
};


/** @param {?proto.exec.Header|undefined} value */
proto.exec.Event.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.exec.Event.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Event.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InputEvent Input = 2;
 * @return {?proto.exec.InputEvent}
 */
proto.exec.Event.prototype.getInput = function() {
  return /** @type{?proto.exec.InputEvent} */ (
    jspb.Message.getWrapperField(this, proto.exec.InputEvent, 2));
};


/** @param {?proto.exec.InputEvent|undefined} value */
proto.exec.Event.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.exec.Event.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Event.prototype.hasInput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OutputEvent Output = 3;
 * @return {?proto.exec.OutputEvent}
 */
proto.exec.Event.prototype.getOutput = function() {
  return /** @type{?proto.exec.OutputEvent} */ (
    jspb.Message.getWrapperField(this, proto.exec.OutputEvent, 3));
};


/** @param {?proto.exec.OutputEvent|undefined} value */
proto.exec.Event.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.exec.Event.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Event.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CallEvent Call = 4;
 * @return {?proto.exec.CallEvent}
 */
proto.exec.Event.prototype.getCall = function() {
  return /** @type{?proto.exec.CallEvent} */ (
    jspb.Message.getWrapperField(this, proto.exec.CallEvent, 4));
};


/** @param {?proto.exec.CallEvent|undefined} value */
proto.exec.Event.prototype.setCall = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.exec.Event.prototype.clearCall = function() {
  this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Event.prototype.hasCall = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LogEvent Log = 5;
 * @return {?proto.exec.LogEvent}
 */
proto.exec.Event.prototype.getLog = function() {
  return /** @type{?proto.exec.LogEvent} */ (
    jspb.Message.getWrapperField(this, proto.exec.LogEvent, 5));
};


/** @param {?proto.exec.LogEvent|undefined} value */
proto.exec.Event.prototype.setLog = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.exec.Event.prototype.clearLog = function() {
  this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Event.prototype.hasLog = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GovernAccountEvent GovernAccount = 6;
 * @return {?proto.exec.GovernAccountEvent}
 */
proto.exec.Event.prototype.getGovernaccount = function() {
  return /** @type{?proto.exec.GovernAccountEvent} */ (
    jspb.Message.getWrapperField(this, proto.exec.GovernAccountEvent, 6));
};


/** @param {?proto.exec.GovernAccountEvent|undefined} value */
proto.exec.Event.prototype.setGovernaccount = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.exec.Event.prototype.clearGovernaccount = function() {
  this.setGovernaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Event.prototype.hasGovernaccount = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.Result.displayName = 'proto.exec.Result';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_return: msg.getReturn_asB64(),
    gasused: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nameentry: (f = msg.getNameentry()) && names_pb.Entry.toObject(includeInstance, f),
    permargs: (f = msg.getPermargs()) && permission_pb.PermArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.Result}
 */
proto.exec.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.Result;
  return proto.exec.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.Result}
 */
proto.exec.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReturn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasused(value);
      break;
    case 3:
      var value = new names_pb.Entry;
      reader.readMessage(value,names_pb.Entry.deserializeBinaryFromReader);
      msg.setNameentry(value);
      break;
    case 4:
      var value = new permission_pb.PermArgs;
      reader.readMessage(value,permission_pb.PermArgs.deserializeBinaryFromReader);
      msg.setPermargs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturn_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGasused();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNameentry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      names_pb.Entry.serializeBinaryToWriter
    );
  }
  f = message.getPermargs();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      permission_pb.PermArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes Return = 1;
 * @return {!(string|Uint8Array)}
 */
proto.exec.Result.prototype.getReturn = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Return = 1;
 * This is a type-conversion wrapper around `getReturn()`
 * @return {string}
 */
proto.exec.Result.prototype.getReturn_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReturn()));
};


/**
 * optional bytes Return = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReturn()`
 * @return {!Uint8Array}
 */
proto.exec.Result.prototype.getReturn_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReturn()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.Result.prototype.setReturn = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 GasUsed = 2;
 * @return {number}
 */
proto.exec.Result.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.exec.Result.prototype.setGasused = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional names.Entry NameEntry = 3;
 * @return {?proto.names.Entry}
 */
proto.exec.Result.prototype.getNameentry = function() {
  return /** @type{?proto.names.Entry} */ (
    jspb.Message.getWrapperField(this, names_pb.Entry, 3));
};


/** @param {?proto.names.Entry|undefined} value */
proto.exec.Result.prototype.setNameentry = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.exec.Result.prototype.clearNameentry = function() {
  this.setNameentry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Result.prototype.hasNameentry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional permission.PermArgs PermArgs = 4;
 * @return {?proto.permission.PermArgs}
 */
proto.exec.Result.prototype.getPermargs = function() {
  return /** @type{?proto.permission.PermArgs} */ (
    jspb.Message.getWrapperField(this, permission_pb.PermArgs, 4));
};


/** @param {?proto.permission.PermArgs|undefined} value */
proto.exec.Result.prototype.setPermargs = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.exec.Result.prototype.clearPermargs = function() {
  this.setPermargs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.Result.prototype.hasPermargs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.LogEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exec.LogEvent.repeatedFields_, null);
};
goog.inherits(proto.exec.LogEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.LogEvent.displayName = 'proto.exec.LogEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exec.LogEvent.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.LogEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.LogEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.LogEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.LogEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    data: msg.getData_asB64(),
    topicsList: msg.getTopicsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.LogEvent}
 */
proto.exec.LogEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.LogEvent;
  return proto.exec.LogEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.LogEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.LogEvent}
 */
proto.exec.LogEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTopics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.LogEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.LogEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.LogEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.LogEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTopicsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.exec.LogEvent.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.exec.LogEvent.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.exec.LogEvent.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.LogEvent.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes Data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.exec.LogEvent.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.exec.LogEvent.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.exec.LogEvent.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.LogEvent.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes Topics = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.exec.LogEvent.prototype.getTopicsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes Topics = 3;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.exec.LogEvent.prototype.getTopicsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTopicsList()));
};


/**
 * repeated bytes Topics = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.exec.LogEvent.prototype.getTopicsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTopicsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.exec.LogEvent.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.exec.LogEvent.prototype.addTopics = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.exec.LogEvent.prototype.clearTopicsList = function() {
  this.setTopicsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.CallEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.CallEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.CallEvent.displayName = 'proto.exec.CallEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.CallEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.CallEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.CallEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.CallEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    calltype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    calldata: (f = msg.getCalldata()) && proto.exec.CallData.toObject(includeInstance, f),
    origin: msg.getOrigin_asB64(),
    stackdepth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pb_return: msg.getReturn_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.CallEvent}
 */
proto.exec.CallEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.CallEvent;
  return proto.exec.CallEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.CallEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.CallEvent}
 */
proto.exec.CallEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCalltype(value);
      break;
    case 1:
      var value = new proto.exec.CallData;
      reader.readMessage(value,proto.exec.CallData.deserializeBinaryFromReader);
      msg.setCalldata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrigin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStackdepth(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReturn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.CallEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.CallEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.CallEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.CallEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalltype();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCalldata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.exec.CallData.serializeBinaryToWriter
    );
  }
  f = message.getOrigin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStackdepth();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getReturn_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint32 CallType = 5;
 * @return {number}
 */
proto.exec.CallEvent.prototype.getCalltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.exec.CallEvent.prototype.setCalltype = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional CallData CallData = 1;
 * @return {?proto.exec.CallData}
 */
proto.exec.CallEvent.prototype.getCalldata = function() {
  return /** @type{?proto.exec.CallData} */ (
    jspb.Message.getWrapperField(this, proto.exec.CallData, 1));
};


/** @param {?proto.exec.CallData|undefined} value */
proto.exec.CallEvent.prototype.setCalldata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.exec.CallEvent.prototype.clearCalldata = function() {
  this.setCalldata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.CallEvent.prototype.hasCalldata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes Origin = 2;
 * @return {!(string|Uint8Array)}
 */
proto.exec.CallEvent.prototype.getOrigin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Origin = 2;
 * This is a type-conversion wrapper around `getOrigin()`
 * @return {string}
 */
proto.exec.CallEvent.prototype.getOrigin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrigin()));
};


/**
 * optional bytes Origin = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrigin()`
 * @return {!Uint8Array}
 */
proto.exec.CallEvent.prototype.getOrigin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrigin()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.CallEvent.prototype.setOrigin = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 StackDepth = 3;
 * @return {number}
 */
proto.exec.CallEvent.prototype.getStackdepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.exec.CallEvent.prototype.setStackdepth = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes Return = 4;
 * @return {!(string|Uint8Array)}
 */
proto.exec.CallEvent.prototype.getReturn = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Return = 4;
 * This is a type-conversion wrapper around `getReturn()`
 * @return {string}
 */
proto.exec.CallEvent.prototype.getReturn_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReturn()));
};


/**
 * optional bytes Return = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReturn()`
 * @return {!Uint8Array}
 */
proto.exec.CallEvent.prototype.getReturn_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReturn()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.CallEvent.prototype.setReturn = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.GovernAccountEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.GovernAccountEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.GovernAccountEvent.displayName = 'proto.exec.GovernAccountEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.GovernAccountEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.GovernAccountEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.GovernAccountEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.GovernAccountEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountupdate: (f = msg.getAccountupdate()) && spec_pb.TemplateAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.GovernAccountEvent}
 */
proto.exec.GovernAccountEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.GovernAccountEvent;
  return proto.exec.GovernAccountEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.GovernAccountEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.GovernAccountEvent}
 */
proto.exec.GovernAccountEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spec_pb.TemplateAccount;
      reader.readMessage(value,spec_pb.TemplateAccount.deserializeBinaryFromReader);
      msg.setAccountupdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.GovernAccountEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.GovernAccountEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.GovernAccountEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.GovernAccountEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountupdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      spec_pb.TemplateAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional spec.TemplateAccount AccountUpdate = 1;
 * @return {?proto.spec.TemplateAccount}
 */
proto.exec.GovernAccountEvent.prototype.getAccountupdate = function() {
  return /** @type{?proto.spec.TemplateAccount} */ (
    jspb.Message.getWrapperField(this, spec_pb.TemplateAccount, 1));
};


/** @param {?proto.spec.TemplateAccount|undefined} value */
proto.exec.GovernAccountEvent.prototype.setAccountupdate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.exec.GovernAccountEvent.prototype.clearAccountupdate = function() {
  this.setAccountupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exec.GovernAccountEvent.prototype.hasAccountupdate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.InputEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.InputEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.InputEvent.displayName = 'proto.exec.InputEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.InputEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.InputEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.InputEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.InputEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.InputEvent}
 */
proto.exec.InputEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.InputEvent;
  return proto.exec.InputEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.InputEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.InputEvent}
 */
proto.exec.InputEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.InputEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.InputEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.InputEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.InputEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.exec.InputEvent.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.exec.InputEvent.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.exec.InputEvent.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.InputEvent.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.OutputEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.OutputEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.OutputEvent.displayName = 'proto.exec.OutputEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.OutputEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.OutputEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.OutputEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.OutputEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.OutputEvent}
 */
proto.exec.OutputEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.OutputEvent;
  return proto.exec.OutputEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.OutputEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.OutputEvent}
 */
proto.exec.OutputEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.OutputEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.OutputEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.OutputEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.OutputEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.exec.OutputEvent.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.exec.OutputEvent.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.exec.OutputEvent.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.OutputEvent.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exec.CallData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exec.CallData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.exec.CallData.displayName = 'proto.exec.CallData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exec.CallData.prototype.toObject = function(opt_includeInstance) {
  return proto.exec.CallData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exec.CallData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.CallData.toObject = function(includeInstance, msg) {
  var f, obj = {
    caller: msg.getCaller_asB64(),
    callee: msg.getCallee_asB64(),
    data: msg.getData_asB64(),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gas: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exec.CallData}
 */
proto.exec.CallData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exec.CallData;
  return proto.exec.CallData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exec.CallData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exec.CallData}
 */
proto.exec.CallData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCaller(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCallee(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exec.CallData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exec.CallData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exec.CallData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exec.CallData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaller_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCallee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional bytes Caller = 1;
 * @return {!(string|Uint8Array)}
 */
proto.exec.CallData.prototype.getCaller = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Caller = 1;
 * This is a type-conversion wrapper around `getCaller()`
 * @return {string}
 */
proto.exec.CallData.prototype.getCaller_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCaller()));
};


/**
 * optional bytes Caller = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCaller()`
 * @return {!Uint8Array}
 */
proto.exec.CallData.prototype.getCaller_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCaller()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.CallData.prototype.setCaller = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes Callee = 2;
 * @return {!(string|Uint8Array)}
 */
proto.exec.CallData.prototype.getCallee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Callee = 2;
 * This is a type-conversion wrapper around `getCallee()`
 * @return {string}
 */
proto.exec.CallData.prototype.getCallee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCallee()));
};


/**
 * optional bytes Callee = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCallee()`
 * @return {!Uint8Array}
 */
proto.exec.CallData.prototype.getCallee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCallee()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.CallData.prototype.setCallee = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes Data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.exec.CallData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.exec.CallData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.exec.CallData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.exec.CallData.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 Value = 4;
 * @return {number}
 */
proto.exec.CallData.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.exec.CallData.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 Gas = 5;
 * @return {number}
 */
proto.exec.CallData.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.exec.CallData.prototype.setGas = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.exec);
