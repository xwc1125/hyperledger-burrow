/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var permission_pb = require('./permission_pb.js');
goog.object.extend(proto, permission_pb);
var registry_pb = require('./registry_pb.js');
goog.object.extend(proto, registry_pb);
var spec_pb = require('./spec_pb.js');
goog.object.extend(proto, spec_pb);
goog.exportSymbol('proto.payload.Any', null, global);
goog.exportSymbol('proto.payload.Ballot', null, global);
goog.exportSymbol('proto.payload.Ballot.ProposalState', null, global);
goog.exportSymbol('proto.payload.BatchTx', null, global);
goog.exportSymbol('proto.payload.BondTx', null, global);
goog.exportSymbol('proto.payload.CallTx', null, global);
goog.exportSymbol('proto.payload.ContractMeta', null, global);
goog.exportSymbol('proto.payload.GovTx', null, global);
goog.exportSymbol('proto.payload.IdentifyTx', null, global);
goog.exportSymbol('proto.payload.NameTx', null, global);
goog.exportSymbol('proto.payload.PermsTx', null, global);
goog.exportSymbol('proto.payload.Proposal', null, global);
goog.exportSymbol('proto.payload.ProposalTx', null, global);
goog.exportSymbol('proto.payload.SendTx', null, global);
goog.exportSymbol('proto.payload.TxInput', null, global);
goog.exportSymbol('proto.payload.TxOutput', null, global);
goog.exportSymbol('proto.payload.UnbondTx', null, global);
goog.exportSymbol('proto.payload.Vote', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.Any = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.Any, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.Any.displayName = 'proto.payload.Any';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.Any.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.Any.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.Any} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Any.toObject = function(includeInstance, msg) {
  var f, obj = {
    calltx: (f = msg.getCalltx()) && proto.payload.CallTx.toObject(includeInstance, f),
    sendtx: (f = msg.getSendtx()) && proto.payload.SendTx.toObject(includeInstance, f),
    nametx: (f = msg.getNametx()) && proto.payload.NameTx.toObject(includeInstance, f),
    permstx: (f = msg.getPermstx()) && proto.payload.PermsTx.toObject(includeInstance, f),
    govtx: (f = msg.getGovtx()) && proto.payload.GovTx.toObject(includeInstance, f),
    bondtx: (f = msg.getBondtx()) && proto.payload.BondTx.toObject(includeInstance, f),
    unbondtx: (f = msg.getUnbondtx()) && proto.payload.UnbondTx.toObject(includeInstance, f),
    batchtx: (f = msg.getBatchtx()) && proto.payload.BatchTx.toObject(includeInstance, f),
    proposaltx: (f = msg.getProposaltx()) && proto.payload.ProposalTx.toObject(includeInstance, f),
    identifytx: (f = msg.getIdentifytx()) && proto.payload.IdentifyTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.Any}
 */
proto.payload.Any.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.Any;
  return proto.payload.Any.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.Any} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.Any}
 */
proto.payload.Any.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.CallTx;
      reader.readMessage(value,proto.payload.CallTx.deserializeBinaryFromReader);
      msg.setCalltx(value);
      break;
    case 2:
      var value = new proto.payload.SendTx;
      reader.readMessage(value,proto.payload.SendTx.deserializeBinaryFromReader);
      msg.setSendtx(value);
      break;
    case 3:
      var value = new proto.payload.NameTx;
      reader.readMessage(value,proto.payload.NameTx.deserializeBinaryFromReader);
      msg.setNametx(value);
      break;
    case 4:
      var value = new proto.payload.PermsTx;
      reader.readMessage(value,proto.payload.PermsTx.deserializeBinaryFromReader);
      msg.setPermstx(value);
      break;
    case 5:
      var value = new proto.payload.GovTx;
      reader.readMessage(value,proto.payload.GovTx.deserializeBinaryFromReader);
      msg.setGovtx(value);
      break;
    case 6:
      var value = new proto.payload.BondTx;
      reader.readMessage(value,proto.payload.BondTx.deserializeBinaryFromReader);
      msg.setBondtx(value);
      break;
    case 7:
      var value = new proto.payload.UnbondTx;
      reader.readMessage(value,proto.payload.UnbondTx.deserializeBinaryFromReader);
      msg.setUnbondtx(value);
      break;
    case 8:
      var value = new proto.payload.BatchTx;
      reader.readMessage(value,proto.payload.BatchTx.deserializeBinaryFromReader);
      msg.setBatchtx(value);
      break;
    case 9:
      var value = new proto.payload.ProposalTx;
      reader.readMessage(value,proto.payload.ProposalTx.deserializeBinaryFromReader);
      msg.setProposaltx(value);
      break;
    case 10:
      var value = new proto.payload.IdentifyTx;
      reader.readMessage(value,proto.payload.IdentifyTx.deserializeBinaryFromReader);
      msg.setIdentifytx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.Any.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.Any.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.Any} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Any.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalltx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.CallTx.serializeBinaryToWriter
    );
  }
  f = message.getSendtx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.payload.SendTx.serializeBinaryToWriter
    );
  }
  f = message.getNametx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.payload.NameTx.serializeBinaryToWriter
    );
  }
  f = message.getPermstx();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.payload.PermsTx.serializeBinaryToWriter
    );
  }
  f = message.getGovtx();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.payload.GovTx.serializeBinaryToWriter
    );
  }
  f = message.getBondtx();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.payload.BondTx.serializeBinaryToWriter
    );
  }
  f = message.getUnbondtx();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.payload.UnbondTx.serializeBinaryToWriter
    );
  }
  f = message.getBatchtx();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.payload.BatchTx.serializeBinaryToWriter
    );
  }
  f = message.getProposaltx();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.payload.ProposalTx.serializeBinaryToWriter
    );
  }
  f = message.getIdentifytx();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.payload.IdentifyTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional CallTx CallTx = 1;
 * @return {?proto.payload.CallTx}
 */
proto.payload.Any.prototype.getCalltx = function() {
  return /** @type{?proto.payload.CallTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.CallTx, 1));
};


/** @param {?proto.payload.CallTx|undefined} value */
proto.payload.Any.prototype.setCalltx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.Any.prototype.clearCalltx = function() {
  this.setCalltx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasCalltx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SendTx SendTx = 2;
 * @return {?proto.payload.SendTx}
 */
proto.payload.Any.prototype.getSendtx = function() {
  return /** @type{?proto.payload.SendTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.SendTx, 2));
};


/** @param {?proto.payload.SendTx|undefined} value */
proto.payload.Any.prototype.setSendtx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.payload.Any.prototype.clearSendtx = function() {
  this.setSendtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasSendtx = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NameTx NameTx = 3;
 * @return {?proto.payload.NameTx}
 */
proto.payload.Any.prototype.getNametx = function() {
  return /** @type{?proto.payload.NameTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.NameTx, 3));
};


/** @param {?proto.payload.NameTx|undefined} value */
proto.payload.Any.prototype.setNametx = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.payload.Any.prototype.clearNametx = function() {
  this.setNametx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasNametx = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PermsTx PermsTx = 4;
 * @return {?proto.payload.PermsTx}
 */
proto.payload.Any.prototype.getPermstx = function() {
  return /** @type{?proto.payload.PermsTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.PermsTx, 4));
};


/** @param {?proto.payload.PermsTx|undefined} value */
proto.payload.Any.prototype.setPermstx = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.payload.Any.prototype.clearPermstx = function() {
  this.setPermstx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasPermstx = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GovTx GovTx = 5;
 * @return {?proto.payload.GovTx}
 */
proto.payload.Any.prototype.getGovtx = function() {
  return /** @type{?proto.payload.GovTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.GovTx, 5));
};


/** @param {?proto.payload.GovTx|undefined} value */
proto.payload.Any.prototype.setGovtx = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.payload.Any.prototype.clearGovtx = function() {
  this.setGovtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasGovtx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BondTx BondTx = 6;
 * @return {?proto.payload.BondTx}
 */
proto.payload.Any.prototype.getBondtx = function() {
  return /** @type{?proto.payload.BondTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.BondTx, 6));
};


/** @param {?proto.payload.BondTx|undefined} value */
proto.payload.Any.prototype.setBondtx = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.payload.Any.prototype.clearBondtx = function() {
  this.setBondtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasBondtx = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UnbondTx UnbondTx = 7;
 * @return {?proto.payload.UnbondTx}
 */
proto.payload.Any.prototype.getUnbondtx = function() {
  return /** @type{?proto.payload.UnbondTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.UnbondTx, 7));
};


/** @param {?proto.payload.UnbondTx|undefined} value */
proto.payload.Any.prototype.setUnbondtx = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.payload.Any.prototype.clearUnbondtx = function() {
  this.setUnbondtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasUnbondtx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BatchTx BatchTx = 8;
 * @return {?proto.payload.BatchTx}
 */
proto.payload.Any.prototype.getBatchtx = function() {
  return /** @type{?proto.payload.BatchTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.BatchTx, 8));
};


/** @param {?proto.payload.BatchTx|undefined} value */
proto.payload.Any.prototype.setBatchtx = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.payload.Any.prototype.clearBatchtx = function() {
  this.setBatchtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasBatchtx = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ProposalTx ProposalTx = 9;
 * @return {?proto.payload.ProposalTx}
 */
proto.payload.Any.prototype.getProposaltx = function() {
  return /** @type{?proto.payload.ProposalTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.ProposalTx, 9));
};


/** @param {?proto.payload.ProposalTx|undefined} value */
proto.payload.Any.prototype.setProposaltx = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.payload.Any.prototype.clearProposaltx = function() {
  this.setProposaltx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasProposaltx = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional IdentifyTx IdentifyTx = 10;
 * @return {?proto.payload.IdentifyTx}
 */
proto.payload.Any.prototype.getIdentifytx = function() {
  return /** @type{?proto.payload.IdentifyTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.IdentifyTx, 10));
};


/** @param {?proto.payload.IdentifyTx|undefined} value */
proto.payload.Any.prototype.setIdentifytx = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.payload.Any.prototype.clearIdentifytx = function() {
  this.setIdentifytx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasIdentifytx = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.TxInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.TxInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.TxInput.displayName = 'proto.payload.TxInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.TxInput.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.TxInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.TxInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.TxInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.TxInput}
 */
proto.payload.TxInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.TxInput;
  return proto.payload.TxInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.TxInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.TxInput}
 */
proto.payload.TxInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.TxInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.TxInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.TxInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.TxInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.payload.TxInput.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.payload.TxInput.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.payload.TxInput.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.TxInput.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Amount = 2;
 * @return {number}
 */
proto.payload.TxInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.payload.TxInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 Sequence = 3;
 * @return {number}
 */
proto.payload.TxInput.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.payload.TxInput.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.TxOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.TxOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.TxOutput.displayName = 'proto.payload.TxOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.TxOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.TxOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.TxOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.TxOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.TxOutput}
 */
proto.payload.TxOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.TxOutput;
  return proto.payload.TxOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.TxOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.TxOutput}
 */
proto.payload.TxOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.TxOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.TxOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.TxOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.TxOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.payload.TxOutput.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.payload.TxOutput.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.payload.TxOutput.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.TxOutput.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Amount = 2;
 * @return {number}
 */
proto.payload.TxOutput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.payload.TxOutput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.CallTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.CallTx.repeatedFields_, null);
};
goog.inherits(proto.payload.CallTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.CallTx.displayName = 'proto.payload.CallTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.CallTx.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.CallTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.CallTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.CallTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.CallTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f),
    address: msg.getAddress_asB64(),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64(),
    wasm: msg.getWasm_asB64(),
    contractmetaList: jspb.Message.toObjectList(msg.getContractmetaList(),
    proto.payload.ContractMeta.toObject, includeInstance),
    gasprice: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.CallTx}
 */
proto.payload.CallTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.CallTx;
  return proto.payload.CallTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.CallTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.CallTx}
 */
proto.payload.CallTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGaslimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWasm(value);
      break;
    case 7:
      var value = new proto.payload.ContractMeta;
      reader.readMessage(value,proto.payload.ContractMeta.deserializeBinaryFromReader);
      msg.addContractmeta(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.CallTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.CallTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.CallTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.CallTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getGaslimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getWasm_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getContractmetaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.payload.ContractMeta.serializeBinaryToWriter
    );
  }
  f = message.getGasprice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.CallTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {?proto.payload.TxInput|undefined} value */
proto.payload.CallTx.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.CallTx.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.CallTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes Address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.payload.CallTx.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.payload.CallTx.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.payload.CallTx.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.CallTx.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 GasLimit = 3;
 * @return {number}
 */
proto.payload.CallTx.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.payload.CallTx.prototype.setGaslimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Fee = 4;
 * @return {number}
 */
proto.payload.CallTx.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.payload.CallTx.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes Data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.payload.CallTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes Data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.payload.CallTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.payload.CallTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.CallTx.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes WASM = 6;
 * @return {!(string|Uint8Array)}
 */
proto.payload.CallTx.prototype.getWasm = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes WASM = 6;
 * This is a type-conversion wrapper around `getWasm()`
 * @return {string}
 */
proto.payload.CallTx.prototype.getWasm_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWasm()));
};


/**
 * optional bytes WASM = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWasm()`
 * @return {!Uint8Array}
 */
proto.payload.CallTx.prototype.getWasm_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWasm()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.CallTx.prototype.setWasm = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated ContractMeta ContractMeta = 7;
 * @return {!Array<!proto.payload.ContractMeta>}
 */
proto.payload.CallTx.prototype.getContractmetaList = function() {
  return /** @type{!Array<!proto.payload.ContractMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.ContractMeta, 7));
};


/** @param {!Array<!proto.payload.ContractMeta>} value */
proto.payload.CallTx.prototype.setContractmetaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.payload.ContractMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.ContractMeta}
 */
proto.payload.CallTx.prototype.addContractmeta = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.payload.ContractMeta, opt_index);
};


proto.payload.CallTx.prototype.clearContractmetaList = function() {
  this.setContractmetaList([]);
};


/**
 * optional uint64 GasPrice = 8;
 * @return {number}
 */
proto.payload.CallTx.prototype.getGasprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.payload.CallTx.prototype.setGasprice = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.ContractMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.ContractMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.ContractMeta.displayName = 'proto.payload.ContractMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.ContractMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.ContractMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.ContractMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ContractMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    codehash: msg.getCodehash_asB64(),
    meta: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.ContractMeta}
 */
proto.payload.ContractMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.ContractMeta;
  return proto.payload.ContractMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.ContractMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.ContractMeta}
 */
proto.payload.ContractMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodehash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.ContractMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.ContractMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.ContractMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ContractMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMeta();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes CodeHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.payload.ContractMeta.prototype.getCodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes CodeHash = 1;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
proto.payload.ContractMeta.prototype.getCodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodehash()));
};


/**
 * optional bytes CodeHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
proto.payload.ContractMeta.prototype.getCodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.ContractMeta.prototype.setCodehash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Meta = 2;
 * @return {string}
 */
proto.payload.ContractMeta.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.payload.ContractMeta.prototype.setMeta = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.SendTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.SendTx.repeatedFields_, null);
};
goog.inherits(proto.payload.SendTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.SendTx.displayName = 'proto.payload.SendTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.SendTx.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.SendTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.SendTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.SendTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.SendTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.payload.TxInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.payload.TxOutput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.SendTx}
 */
proto.payload.SendTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.SendTx;
  return proto.payload.SendTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.SendTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.SendTx}
 */
proto.payload.SendTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.payload.TxOutput;
      reader.readMessage(value,proto.payload.TxOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.SendTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.SendTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.SendTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.SendTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.payload.TxOutput.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxInput Inputs = 1;
 * @return {!Array<!proto.payload.TxInput>}
 */
proto.payload.SendTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.payload.TxInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {!Array<!proto.payload.TxInput>} value */
proto.payload.SendTx.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.payload.TxInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TxInput}
 */
proto.payload.SendTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.payload.TxInput, opt_index);
};


proto.payload.SendTx.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated TxOutput Outputs = 2;
 * @return {!Array<!proto.payload.TxOutput>}
 */
proto.payload.SendTx.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.payload.TxOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TxOutput, 2));
};


/** @param {!Array<!proto.payload.TxOutput>} value */
proto.payload.SendTx.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.payload.TxOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TxOutput}
 */
proto.payload.SendTx.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.payload.TxOutput, opt_index);
};


proto.payload.SendTx.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.PermsTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.PermsTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.PermsTx.displayName = 'proto.payload.PermsTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.PermsTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.PermsTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.PermsTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.PermsTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f),
    permargs: (f = msg.getPermargs()) && permission_pb.PermArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.PermsTx}
 */
proto.payload.PermsTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.PermsTx;
  return proto.payload.PermsTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.PermsTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.PermsTx}
 */
proto.payload.PermsTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new permission_pb.PermArgs;
      reader.readMessage(value,permission_pb.PermArgs.deserializeBinaryFromReader);
      msg.setPermargs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.PermsTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.PermsTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.PermsTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.PermsTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getPermargs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      permission_pb.PermArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.PermsTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {?proto.payload.TxInput|undefined} value */
proto.payload.PermsTx.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.PermsTx.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.PermsTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional permission.PermArgs PermArgs = 2;
 * @return {?proto.permission.PermArgs}
 */
proto.payload.PermsTx.prototype.getPermargs = function() {
  return /** @type{?proto.permission.PermArgs} */ (
    jspb.Message.getWrapperField(this, permission_pb.PermArgs, 2));
};


/** @param {?proto.permission.PermArgs|undefined} value */
proto.payload.PermsTx.prototype.setPermargs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.payload.PermsTx.prototype.clearPermargs = function() {
  this.setPermargs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.PermsTx.prototype.hasPermargs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.NameTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.NameTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.NameTx.displayName = 'proto.payload.NameTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.NameTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.NameTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.NameTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.NameTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.NameTx}
 */
proto.payload.NameTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.NameTx;
  return proto.payload.NameTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.NameTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.NameTx}
 */
proto.payload.NameTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.NameTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.NameTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.NameTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.NameTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.NameTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {?proto.payload.TxInput|undefined} value */
proto.payload.NameTx.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.NameTx.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.NameTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.payload.NameTx.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.payload.NameTx.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Data = 3;
 * @return {string}
 */
proto.payload.NameTx.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.payload.NameTx.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 Fee = 4;
 * @return {number}
 */
proto.payload.NameTx.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.payload.NameTx.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.BondTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.BondTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.BondTx.displayName = 'proto.payload.BondTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.BondTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.BondTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.BondTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BondTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.BondTx}
 */
proto.payload.BondTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.BondTx;
  return proto.payload.BondTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.BondTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.BondTx}
 */
proto.payload.BondTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.BondTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.BondTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.BondTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BondTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.BondTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {?proto.payload.TxInput|undefined} value */
proto.payload.BondTx.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.BondTx.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.BondTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.UnbondTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.UnbondTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.UnbondTx.displayName = 'proto.payload.UnbondTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.UnbondTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.UnbondTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.UnbondTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.UnbondTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.payload.TxOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.UnbondTx}
 */
proto.payload.UnbondTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.UnbondTx;
  return proto.payload.UnbondTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.UnbondTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.UnbondTx}
 */
proto.payload.UnbondTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new proto.payload.TxOutput;
      reader.readMessage(value,proto.payload.TxOutput.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.UnbondTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.UnbondTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.UnbondTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.UnbondTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.payload.TxOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.UnbondTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {?proto.payload.TxInput|undefined} value */
proto.payload.UnbondTx.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.UnbondTx.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.UnbondTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxOutput Output = 2;
 * @return {?proto.payload.TxOutput}
 */
proto.payload.UnbondTx.prototype.getOutput = function() {
  return /** @type{?proto.payload.TxOutput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxOutput, 2));
};


/** @param {?proto.payload.TxOutput|undefined} value */
proto.payload.UnbondTx.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.payload.UnbondTx.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.UnbondTx.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.GovTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.GovTx.repeatedFields_, null);
};
goog.inherits(proto.payload.GovTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.GovTx.displayName = 'proto.payload.GovTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.GovTx.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.GovTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.GovTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.GovTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.GovTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.payload.TxInput.toObject, includeInstance),
    accountupdatesList: jspb.Message.toObjectList(msg.getAccountupdatesList(),
    spec_pb.TemplateAccount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.GovTx}
 */
proto.payload.GovTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.GovTx;
  return proto.payload.GovTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.GovTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.GovTx}
 */
proto.payload.GovTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new spec_pb.TemplateAccount;
      reader.readMessage(value,spec_pb.TemplateAccount.deserializeBinaryFromReader);
      msg.addAccountupdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.GovTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.GovTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.GovTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.GovTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getAccountupdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      spec_pb.TemplateAccount.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxInput Inputs = 1;
 * @return {!Array<!proto.payload.TxInput>}
 */
proto.payload.GovTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.payload.TxInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {!Array<!proto.payload.TxInput>} value */
proto.payload.GovTx.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.payload.TxInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TxInput}
 */
proto.payload.GovTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.payload.TxInput, opt_index);
};


proto.payload.GovTx.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated spec.TemplateAccount AccountUpdates = 2;
 * @return {!Array<!proto.spec.TemplateAccount>}
 */
proto.payload.GovTx.prototype.getAccountupdatesList = function() {
  return /** @type{!Array<!proto.spec.TemplateAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, spec_pb.TemplateAccount, 2));
};


/** @param {!Array<!proto.spec.TemplateAccount>} value */
proto.payload.GovTx.prototype.setAccountupdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.spec.TemplateAccount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spec.TemplateAccount}
 */
proto.payload.GovTx.prototype.addAccountupdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.spec.TemplateAccount, opt_index);
};


proto.payload.GovTx.prototype.clearAccountupdatesList = function() {
  this.setAccountupdatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.ProposalTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.ProposalTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.ProposalTx.displayName = 'proto.payload.ProposalTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.ProposalTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.ProposalTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.ProposalTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ProposalTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f),
    votingweight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalhash: msg.getProposalhash_asB64(),
    proposal: (f = msg.getProposal()) && proto.payload.Proposal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.ProposalTx}
 */
proto.payload.ProposalTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.ProposalTx;
  return proto.payload.ProposalTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.ProposalTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.ProposalTx}
 */
proto.payload.ProposalTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotingweight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposalhash(value);
      break;
    case 4:
      var value = new proto.payload.Proposal;
      reader.readMessage(value,proto.payload.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.ProposalTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.ProposalTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.ProposalTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ProposalTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getVotingweight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProposalhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.payload.Proposal.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.ProposalTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {?proto.payload.TxInput|undefined} value */
proto.payload.ProposalTx.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.ProposalTx.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ProposalTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 VotingWeight = 2;
 * @return {number}
 */
proto.payload.ProposalTx.prototype.getVotingweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.payload.ProposalTx.prototype.setVotingweight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes ProposalHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.payload.ProposalTx.prototype.getProposalhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ProposalHash = 3;
 * This is a type-conversion wrapper around `getProposalhash()`
 * @return {string}
 */
proto.payload.ProposalTx.prototype.getProposalhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposalhash()));
};


/**
 * optional bytes ProposalHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposalhash()`
 * @return {!Uint8Array}
 */
proto.payload.ProposalTx.prototype.getProposalhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposalhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.ProposalTx.prototype.setProposalhash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Proposal Proposal = 4;
 * @return {?proto.payload.Proposal}
 */
proto.payload.ProposalTx.prototype.getProposal = function() {
  return /** @type{?proto.payload.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.payload.Proposal, 4));
};


/** @param {?proto.payload.Proposal|undefined} value */
proto.payload.ProposalTx.prototype.setProposal = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.payload.ProposalTx.prototype.clearProposal = function() {
  this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ProposalTx.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.IdentifyTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.IdentifyTx.repeatedFields_, null);
};
goog.inherits(proto.payload.IdentifyTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.IdentifyTx.displayName = 'proto.payload.IdentifyTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.IdentifyTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.IdentifyTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.IdentifyTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.IdentifyTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.IdentifyTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.payload.TxInput.toObject, includeInstance),
    node: (f = msg.getNode()) && registry_pb.NodeIdentity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.IdentifyTx}
 */
proto.payload.IdentifyTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.IdentifyTx;
  return proto.payload.IdentifyTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.IdentifyTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.IdentifyTx}
 */
proto.payload.IdentifyTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new registry_pb.NodeIdentity;
      reader.readMessage(value,registry_pb.NodeIdentity.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.IdentifyTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.IdentifyTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.IdentifyTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.IdentifyTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      registry_pb.NodeIdentity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxInput Inputs = 1;
 * @return {!Array<!proto.payload.TxInput>}
 */
proto.payload.IdentifyTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.payload.TxInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {!Array<!proto.payload.TxInput>} value */
proto.payload.IdentifyTx.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.payload.TxInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TxInput}
 */
proto.payload.IdentifyTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.payload.TxInput, opt_index);
};


proto.payload.IdentifyTx.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * optional registry.NodeIdentity Node = 2;
 * @return {?proto.registry.NodeIdentity}
 */
proto.payload.IdentifyTx.prototype.getNode = function() {
  return /** @type{?proto.registry.NodeIdentity} */ (
    jspb.Message.getWrapperField(this, registry_pb.NodeIdentity, 2));
};


/** @param {?proto.registry.NodeIdentity|undefined} value */
proto.payload.IdentifyTx.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.payload.IdentifyTx.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.IdentifyTx.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.BatchTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.BatchTx.repeatedFields_, null);
};
goog.inherits(proto.payload.BatchTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.BatchTx.displayName = 'proto.payload.BatchTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.BatchTx.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.BatchTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.BatchTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.BatchTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BatchTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.payload.TxInput.toObject, includeInstance),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.payload.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.BatchTx}
 */
proto.payload.BatchTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.BatchTx;
  return proto.payload.BatchTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.BatchTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.BatchTx}
 */
proto.payload.BatchTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.payload.Any;
      reader.readMessage(value,proto.payload.Any.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.BatchTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.BatchTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.BatchTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BatchTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.payload.Any.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxInput Inputs = 1;
 * @return {!Array<!proto.payload.TxInput>}
 */
proto.payload.BatchTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.payload.TxInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TxInput, 1));
};


/** @param {!Array<!proto.payload.TxInput>} value */
proto.payload.BatchTx.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.payload.TxInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TxInput}
 */
proto.payload.BatchTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.payload.TxInput, opt_index);
};


proto.payload.BatchTx.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated Any Txs = 2;
 * @return {!Array<!proto.payload.Any>}
 */
proto.payload.BatchTx.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.payload.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.Any, 2));
};


/** @param {!Array<!proto.payload.Any>} value */
proto.payload.BatchTx.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.payload.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.Any}
 */
proto.payload.BatchTx.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.payload.Any, opt_index);
};


proto.payload.BatchTx.prototype.clearTxsList = function() {
  this.setTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.Vote.displayName = 'proto.payload.Vote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    votingweight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.Vote}
 */
proto.payload.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.Vote;
  return proto.payload.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.Vote}
 */
proto.payload.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotingweight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVotingweight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.payload.Vote.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.payload.Vote.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.payload.Vote.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.Vote.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 VotingWeight = 2;
 * @return {number}
 */
proto.payload.Vote.prototype.getVotingweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.payload.Vote.prototype.setVotingweight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.Proposal.displayName = 'proto.payload.Proposal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    batchtx: (f = msg.getBatchtx()) && proto.payload.BatchTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.Proposal}
 */
proto.payload.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.Proposal;
  return proto.payload.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.Proposal}
 */
proto.payload.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.payload.BatchTx;
      reader.readMessage(value,proto.payload.BatchTx.deserializeBinaryFromReader);
      msg.setBatchtx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBatchtx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.payload.BatchTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.payload.Proposal.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.payload.Proposal.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.payload.Proposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.payload.Proposal.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BatchTx BatchTx = 3;
 * @return {?proto.payload.BatchTx}
 */
proto.payload.Proposal.prototype.getBatchtx = function() {
  return /** @type{?proto.payload.BatchTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.BatchTx, 3));
};


/** @param {?proto.payload.BatchTx|undefined} value */
proto.payload.Proposal.prototype.setBatchtx = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.payload.Proposal.prototype.clearBatchtx = function() {
  this.setBatchtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Proposal.prototype.hasBatchtx = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.Ballot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.Ballot.repeatedFields_, null);
};
goog.inherits(proto.payload.Ballot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payload.Ballot.displayName = 'proto.payload.Ballot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.Ballot.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.Ballot.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.Ballot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.Ballot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Ballot.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.payload.Proposal.toObject(includeInstance, f),
    finalizingtx: msg.getFinalizingtx_asB64(),
    proposalstate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.payload.Vote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.Ballot}
 */
proto.payload.Ballot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.Ballot;
  return proto.payload.Ballot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.Ballot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.Ballot}
 */
proto.payload.Ballot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.Proposal;
      reader.readMessage(value,proto.payload.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFinalizingtx(value);
      break;
    case 4:
      var value = /** @type {!proto.payload.Ballot.ProposalState} */ (reader.readEnum());
      msg.setProposalstate(value);
      break;
    case 5:
      var value = new proto.payload.Vote;
      reader.readMessage(value,proto.payload.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.Ballot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.Ballot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.Ballot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Ballot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getFinalizingtx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProposalstate();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.payload.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.payload.Ballot.ProposalState = {
  PROPOSED: 0,
  EXECUTED: 1,
  FAILED: 2
};

/**
 * optional Proposal Proposal = 1;
 * @return {?proto.payload.Proposal}
 */
proto.payload.Ballot.prototype.getProposal = function() {
  return /** @type{?proto.payload.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.payload.Proposal, 1));
};


/** @param {?proto.payload.Proposal|undefined} value */
proto.payload.Ballot.prototype.setProposal = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.payload.Ballot.prototype.clearProposal = function() {
  this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Ballot.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes FinalizingTx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.payload.Ballot.prototype.getFinalizingtx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes FinalizingTx = 2;
 * This is a type-conversion wrapper around `getFinalizingtx()`
 * @return {string}
 */
proto.payload.Ballot.prototype.getFinalizingtx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFinalizingtx()));
};


/**
 * optional bytes FinalizingTx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFinalizingtx()`
 * @return {!Uint8Array}
 */
proto.payload.Ballot.prototype.getFinalizingtx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFinalizingtx()));
};


/** @param {!(string|Uint8Array)} value */
proto.payload.Ballot.prototype.setFinalizingtx = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ProposalState proposalState = 4;
 * @return {!proto.payload.Ballot.ProposalState}
 */
proto.payload.Ballot.prototype.getProposalstate = function() {
  return /** @type {!proto.payload.Ballot.ProposalState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.payload.Ballot.ProposalState} value */
proto.payload.Ballot.prototype.setProposalstate = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated Vote Votes = 5;
 * @return {!Array<!proto.payload.Vote>}
 */
proto.payload.Ballot.prototype.getVotesList = function() {
  return /** @type{!Array<!proto.payload.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.Vote, 5));
};


/** @param {!Array<!proto.payload.Vote>} value */
proto.payload.Ballot.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.payload.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.Vote}
 */
proto.payload.Ballot.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.payload.Vote, opt_index);
};


proto.payload.Ballot.prototype.clearVotesList = function() {
  this.setVotesList([]);
};


goog.object.extend(exports, proto.payload);
