/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var acm_pb = require('./acm_pb.js');
goog.object.extend(proto, acm_pb);
var exec_pb = require('./exec_pb.js');
goog.object.extend(proto, exec_pb);
var names_pb = require('./names_pb.js');
goog.object.extend(proto, names_pb);
goog.exportSymbol('proto.dump.AccountStorage', null, global);
goog.exportSymbol('proto.dump.Dump', null, global);
goog.exportSymbol('proto.dump.EVMEvent', null, global);
goog.exportSymbol('proto.dump.Storage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dump.Storage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dump.Storage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dump.Storage.displayName = 'proto.dump.Storage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dump.Storage.prototype.toObject = function(opt_includeInstance) {
  return proto.dump.Storage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dump.Storage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.Storage.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dump.Storage}
 */
proto.dump.Storage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dump.Storage;
  return proto.dump.Storage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dump.Storage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dump.Storage}
 */
proto.dump.Storage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dump.Storage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dump.Storage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dump.Storage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.Storage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes Key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dump.Storage.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.dump.Storage.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes Key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.dump.Storage.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.dump.Storage.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes Value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dump.Storage.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.dump.Storage.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes Value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.dump.Storage.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.dump.Storage.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dump.AccountStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dump.AccountStorage.repeatedFields_, null);
};
goog.inherits(proto.dump.AccountStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dump.AccountStorage.displayName = 'proto.dump.AccountStorage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dump.AccountStorage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dump.AccountStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.dump.AccountStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dump.AccountStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.AccountStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    storageList: jspb.Message.toObjectList(msg.getStorageList(),
    proto.dump.Storage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dump.AccountStorage}
 */
proto.dump.AccountStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dump.AccountStorage;
  return proto.dump.AccountStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dump.AccountStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dump.AccountStorage}
 */
proto.dump.AccountStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.dump.Storage;
      reader.readMessage(value,proto.dump.Storage.deserializeBinaryFromReader);
      msg.addStorage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dump.AccountStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dump.AccountStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dump.AccountStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.AccountStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStorageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dump.Storage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dump.AccountStorage.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.dump.AccountStorage.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.dump.AccountStorage.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.dump.AccountStorage.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Storage Storage = 2;
 * @return {!Array<!proto.dump.Storage>}
 */
proto.dump.AccountStorage.prototype.getStorageList = function() {
  return /** @type{!Array<!proto.dump.Storage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dump.Storage, 2));
};


/** @param {!Array<!proto.dump.Storage>} value */
proto.dump.AccountStorage.prototype.setStorageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.dump.Storage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dump.Storage}
 */
proto.dump.AccountStorage.prototype.addStorage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.dump.Storage, opt_index);
};


proto.dump.AccountStorage.prototype.clearStorageList = function() {
  this.setStorageList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dump.EVMEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dump.EVMEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dump.EVMEvent.displayName = 'proto.dump.EVMEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dump.EVMEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dump.EVMEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dump.EVMEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.EVMEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && exec_pb.LogEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dump.EVMEvent}
 */
proto.dump.EVMEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dump.EVMEvent;
  return proto.dump.EVMEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dump.EVMEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dump.EVMEvent}
 */
proto.dump.EVMEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = new exec_pb.LogEvent;
      reader.readMessage(value,exec_pb.LogEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dump.EVMEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dump.EVMEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dump.EVMEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.EVMEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      exec_pb.LogEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ChainID = 1;
 * @return {string}
 */
proto.dump.EVMEvent.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dump.EVMEvent.prototype.setChainid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 Index = 4;
 * @return {number}
 */
proto.dump.EVMEvent.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.dump.EVMEvent.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp Time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.dump.EVMEvent.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.dump.EVMEvent.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dump.EVMEvent.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dump.EVMEvent.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional exec.LogEvent Event = 3;
 * @return {?proto.exec.LogEvent}
 */
proto.dump.EVMEvent.prototype.getEvent = function() {
  return /** @type{?proto.exec.LogEvent} */ (
    jspb.Message.getWrapperField(this, exec_pb.LogEvent, 3));
};


/** @param {?proto.exec.LogEvent|undefined} value */
proto.dump.EVMEvent.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dump.EVMEvent.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dump.EVMEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dump.Dump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dump.Dump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dump.Dump.displayName = 'proto.dump.Dump';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dump.Dump.prototype.toObject = function(opt_includeInstance) {
  return proto.dump.Dump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dump.Dump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.Dump.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: (f = msg.getAccount()) && acm_pb.Account.toObject(includeInstance, f),
    accountstorage: (f = msg.getAccountstorage()) && proto.dump.AccountStorage.toObject(includeInstance, f),
    evmevent: (f = msg.getEvmevent()) && proto.dump.EVMEvent.toObject(includeInstance, f),
    name: (f = msg.getName()) && names_pb.Entry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dump.Dump}
 */
proto.dump.Dump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dump.Dump;
  return proto.dump.Dump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dump.Dump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dump.Dump}
 */
proto.dump.Dump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new acm_pb.Account;
      reader.readMessage(value,acm_pb.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 3:
      var value = new proto.dump.AccountStorage;
      reader.readMessage(value,proto.dump.AccountStorage.deserializeBinaryFromReader);
      msg.setAccountstorage(value);
      break;
    case 4:
      var value = new proto.dump.EVMEvent;
      reader.readMessage(value,proto.dump.EVMEvent.deserializeBinaryFromReader);
      msg.setEvmevent(value);
      break;
    case 5:
      var value = new names_pb.Entry;
      reader.readMessage(value,names_pb.Entry.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dump.Dump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dump.Dump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dump.Dump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dump.Dump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      acm_pb.Account.serializeBinaryToWriter
    );
  }
  f = message.getAccountstorage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dump.AccountStorage.serializeBinaryToWriter
    );
  }
  f = message.getEvmevent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dump.EVMEvent.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      names_pb.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Height = 1;
 * @return {number}
 */
proto.dump.Dump.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dump.Dump.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional acm.Account Account = 2;
 * @return {?proto.acm.Account}
 */
proto.dump.Dump.prototype.getAccount = function() {
  return /** @type{?proto.acm.Account} */ (
    jspb.Message.getWrapperField(this, acm_pb.Account, 2));
};


/** @param {?proto.acm.Account|undefined} value */
proto.dump.Dump.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dump.Dump.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dump.Dump.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountStorage AccountStorage = 3;
 * @return {?proto.dump.AccountStorage}
 */
proto.dump.Dump.prototype.getAccountstorage = function() {
  return /** @type{?proto.dump.AccountStorage} */ (
    jspb.Message.getWrapperField(this, proto.dump.AccountStorage, 3));
};


/** @param {?proto.dump.AccountStorage|undefined} value */
proto.dump.Dump.prototype.setAccountstorage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dump.Dump.prototype.clearAccountstorage = function() {
  this.setAccountstorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dump.Dump.prototype.hasAccountstorage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EVMEvent EVMEvent = 4;
 * @return {?proto.dump.EVMEvent}
 */
proto.dump.Dump.prototype.getEvmevent = function() {
  return /** @type{?proto.dump.EVMEvent} */ (
    jspb.Message.getWrapperField(this, proto.dump.EVMEvent, 4));
};


/** @param {?proto.dump.EVMEvent|undefined} value */
proto.dump.Dump.prototype.setEvmevent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.dump.Dump.prototype.clearEvmevent = function() {
  this.setEvmevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dump.Dump.prototype.hasEvmevent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional names.Entry Name = 5;
 * @return {?proto.names.Entry}
 */
proto.dump.Dump.prototype.getName = function() {
  return /** @type{?proto.names.Entry} */ (
    jspb.Message.getWrapperField(this, names_pb.Entry, 5));
};


/** @param {?proto.names.Entry|undefined} value */
proto.dump.Dump.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.dump.Dump.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dump.Dump.prototype.hasName = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.dump);
